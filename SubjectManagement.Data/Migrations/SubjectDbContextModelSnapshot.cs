// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubjectManagement.Data.EF;

namespace SubjectManagement.Data.Migrations
{
    [DbContext(typeof(SubjectDbContext))]
    partial class SubjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dashboard.Data.Entities.AppUserRole", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RoleID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AppUserRole");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.AlternativeSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("IDNew")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDOld")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDNew")
                        .IsUnique();

                    b.ToTable("AlternativeSubject");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.AppRole", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AppRoles");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.AppUser", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.ElectiveGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ElectiveGroup");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.KnowledgeGroup", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("KnowledgeGroup");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.Semeter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Semeter");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.Subject", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CourseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Credit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfPractice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfTheory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeCourse")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.SubjectInElectiveGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("IDElectiveGroup")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDSubject")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDElectiveGroup");

                    b.HasIndex("IDSubject")
                        .IsUnique();

                    b.ToTable("SubjectInElectiveGroup");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.SubjectInKnowledgeGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("IDKnowledgeGroup")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IDSubject")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDKnowledgeGroup");

                    b.HasIndex("IDSubject")
                        .IsUnique();

                    b.ToTable("SubjectInKnowledgeGroup");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.SubjectInSemeter", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IDSemeter")
                        .HasColumnType("int");

                    b.Property<Guid>("IDSubject")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ID");

                    b.HasIndex("IDSemeter");

                    b.HasIndex("IDSubject")
                        .IsUnique();

                    b.ToTable("SubjectInSemeter");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.AlternativeSubject", b =>
                {
                    b.HasOne("SubjectManagement.Data.Entities.Subject", "Subject")
                        .WithOne("AlternativeSubject")
                        .HasForeignKey("SubjectManagement.Data.Entities.AlternativeSubject", "IDNew")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.SubjectInElectiveGroup", b =>
                {
                    b.HasOne("SubjectManagement.Data.Entities.ElectiveGroup", "ElectiveGroup")
                        .WithMany("SubjectInElectiveGroups")
                        .HasForeignKey("IDElectiveGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubjectManagement.Data.Entities.Subject", "Subject")
                        .WithOne("SubjectInElectiveGroup")
                        .HasForeignKey("SubjectManagement.Data.Entities.SubjectInElectiveGroup", "IDSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectiveGroup");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.SubjectInKnowledgeGroup", b =>
                {
                    b.HasOne("SubjectManagement.Data.Entities.KnowledgeGroup", "KnowledgeGroup")
                        .WithMany("SubjectInKnowledgeGroups")
                        .HasForeignKey("IDKnowledgeGroup")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubjectManagement.Data.Entities.Subject", "Subject")
                        .WithOne("SubjectInKnowledgeGroup")
                        .HasForeignKey("SubjectManagement.Data.Entities.SubjectInKnowledgeGroup", "IDSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeGroup");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.SubjectInSemeter", b =>
                {
                    b.HasOne("SubjectManagement.Data.Entities.Semeter", "Semeter")
                        .WithMany("SubjectInSemeters")
                        .HasForeignKey("IDSemeter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SubjectManagement.Data.Entities.Subject", "Subject")
                        .WithOne("SubjectInSemeter")
                        .HasForeignKey("SubjectManagement.Data.Entities.SubjectInSemeter", "IDSubject")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Semeter");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.ElectiveGroup", b =>
                {
                    b.Navigation("SubjectInElectiveGroups");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.KnowledgeGroup", b =>
                {
                    b.Navigation("SubjectInKnowledgeGroups");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.Semeter", b =>
                {
                    b.Navigation("SubjectInSemeters");
                });

            modelBuilder.Entity("SubjectManagement.Data.Entities.Subject", b =>
                {
                    b.Navigation("AlternativeSubject");

                    b.Navigation("SubjectInElectiveGroup");

                    b.Navigation("SubjectInKnowledgeGroup");

                    b.Navigation("SubjectInSemeter");
                });
#pragma warning restore 612, 618
        }
    }
}
